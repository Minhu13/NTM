#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NTM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="test")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHang(Hang instance);
    partial void UpdateHang(Hang instance);
    partial void DeleteHang(Hang instance);
    partial void InsertHoadon(Hoadon instance);
    partial void UpdateHoadon(Hoadon instance);
    partial void DeleteHoadon(Hoadon instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::NTM.Properties.Settings.Default.testConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hang> Hangs
		{
			get
			{
				return this.GetTable<Hang>();
			}
		}
		
		public System.Data.Linq.Table<Hoadon> Hoadons
		{
			get
			{
				return this.GetTable<Hoadon>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hang")]
	public partial class Hang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _sanpham;
		
		private string _soluong;
		
		private System.Nullable<int> _Hoadon;
		
		private EntityRef<Hoadon> _Hoadon1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsanphamChanging(string value);
    partial void OnsanphamChanged();
    partial void OnsoluongChanging(string value);
    partial void OnsoluongChanged();
    partial void OnHoadonChanging(System.Nullable<int> value);
    partial void OnHoadonChanged();
    #endregion
		
		public Hang()
		{
			this._Hoadon1 = default(EntityRef<Hoadon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sanpham", DbType="NVarChar(50)")]
		public string sanpham
		{
			get
			{
				return this._sanpham;
			}
			set
			{
				if ((this._sanpham != value))
				{
					this.OnsanphamChanging(value);
					this.SendPropertyChanging();
					this._sanpham = value;
					this.SendPropertyChanged("sanpham");
					this.OnsanphamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_soluong", DbType="NVarChar(50)")]
		public string soluong
		{
			get
			{
				return this._soluong;
			}
			set
			{
				if ((this._soluong != value))
				{
					this.OnsoluongChanging(value);
					this.SendPropertyChanging();
					this._soluong = value;
					this.SendPropertyChanged("soluong");
					this.OnsoluongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hoadon", DbType="Int")]
		public System.Nullable<int> Hoadon
		{
			get
			{
				return this._Hoadon;
			}
			set
			{
				if ((this._Hoadon != value))
				{
					if (this._Hoadon1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHoadonChanging(value);
					this.SendPropertyChanging();
					this._Hoadon = value;
					this.SendPropertyChanged("Hoadon");
					this.OnHoadonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hoadon_Hang", Storage="_Hoadon1", ThisKey="Hoadon", OtherKey="id", IsForeignKey=true)]
		public Hoadon Hoadon1
		{
			get
			{
				return this._Hoadon1.Entity;
			}
			set
			{
				Hoadon previousValue = this._Hoadon1.Entity;
				if (((previousValue != value) 
							|| (this._Hoadon1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hoadon1.Entity = null;
						previousValue.Hangs.Remove(this);
					}
					this._Hoadon1.Entity = value;
					if ((value != null))
					{
						value.Hangs.Add(this);
						this._Hoadon = value.id;
					}
					else
					{
						this._Hoadon = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hoadon1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hoadon")]
	public partial class Hoadon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _ngay;
		
		private string _mota;
		
		private EntitySet<Hang> _Hangs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnngayChanging(System.Nullable<System.DateTime> value);
    partial void OnngayChanged();
    partial void OnmotaChanging(string value);
    partial void OnmotaChanged();
    #endregion
		
		public Hoadon()
		{
			this._Hangs = new EntitySet<Hang>(new Action<Hang>(this.attach_Hangs), new Action<Hang>(this.detach_Hangs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ngay", DbType="DateTime")]
		public System.Nullable<System.DateTime> ngay
		{
			get
			{
				return this._ngay;
			}
			set
			{
				if ((this._ngay != value))
				{
					this.OnngayChanging(value);
					this.SendPropertyChanging();
					this._ngay = value;
					this.SendPropertyChanged("ngay");
					this.OnngayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mota", DbType="NVarChar(50)")]
		public string mota
		{
			get
			{
				return this._mota;
			}
			set
			{
				if ((this._mota != value))
				{
					this.OnmotaChanging(value);
					this.SendPropertyChanging();
					this._mota = value;
					this.SendPropertyChanged("mota");
					this.OnmotaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hoadon_Hang", Storage="_Hangs", ThisKey="id", OtherKey="Hoadon")]
		public EntitySet<Hang> Hangs
		{
			get
			{
				return this._Hangs;
			}
			set
			{
				this._Hangs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hangs(Hang entity)
		{
			this.SendPropertyChanging();
			entity.Hoadon1 = this;
		}
		
		private void detach_Hangs(Hang entity)
		{
			this.SendPropertyChanging();
			entity.Hoadon1 = null;
		}
	}
}
#pragma warning restore 1591
